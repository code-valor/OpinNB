<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <%- include('imports') %>
</head>
<body>
    <%- include('navbar') %>
    <div class="container">
        <div class="row my-5">
            <div class="col">
    <div class="card border border-info">
        <div class="card-body">
          <h5 class="card-header mb-2">Biyografini Düzenle</h5>
      <form action="/editBio" method="POST">
        <div class="form-outline">
        <textarea type="text" name="bioContent" class="form-control"></textarea>
        <label for="bioContent" class="form-label">Biyografi</label>
        <div class="form-notch"><div class="form-notch-leading" style="width: 9px;"></div><div class="form-notch-middle" style="width: 8px;"></div><div class="form-notch-trailing"></div></div>
      </div>
      <div>Sıfırlamak istiyorsanız boş bırakın.</div>
      <input type="hidden" name="userID" value="<%- discordRequest.user.id %>">
      <button class="btn btn-info my-3" type="submit">Gönder</button>
      </form>
      </div>
      </div>
    </div>
    <div class="col">
        <div class="card border border-success">
            <div class="card-body">
              <h5 class="card-header mb-2">Kategori Seç</h5>
          <form action="/editBusinessStatus" method="POST">
            <div class="form-outline">
            <input type="text" name="targetBusiness" class="form-control autocomplete" id="businessStatus" autocomplete="off">
            <label for="targetBusiness" class="form-label" id="form-autocomplete">Kategori</label>
            <div class="form-notch"><div class="form-notch-leading" style="width: 9px;"></div><div class="form-notch-middle" style="width: 8px;"></div><div class="form-notch-trailing"></div></div>
          </div>
          <input type="hidden" name="userID" value="<%- discordRequest.user.id %>">
          <div>Sıfırlamak istiyorsanız boş bırakın.</div>
          <button class="btn btn-success my-3" type="submit">Gönder</button>
          </form>
          </div>
          </div>
        </div>
    </div>
    <div class="row">
      <div class="col">
    <div class="card border border-primary">
      <div class="card-body">
        <h5 class="card-header">Özel Durum Belirle</h5>
        <form action="/editCustomStatus" method="post">
          <br>
          <div class="form-outline">
            <input type="text" name="targetCustomStatus" class="form-control">
            <label for="targetCustomStatus" class="form-label">Özel Durum</label>
            <div class="form-notch"><div class="form-notch-leading" style="width: 9px;"></div><div class="form-notch-middle" style="width: 8px;"></div><div class="form-notch-trailing"></div></div>
          </div>
          <input type="hidden" name="userID" value="<%- discordRequest.user.id %>">
          <div>Sıfırlamak istiyorsanız boş bırakın.</div>
          <button type="submit" class="btn btn-primary my-3">Gönder</button>
        </form>
      </div>
    </div>
  </div>
  <div class="col">
    <div class="card border border-info">
      <div class="card-body">
        <h5 class="card-header">Hesap Bilgileri</h5>
        <ul class="list-group list-group-flush">
          <li class="list-group-item"><strong>Kullanıcı Adı:</strong><br><%- discordRequest.user.username %></li>
          <li class="list-group-item"><strong>Kullanıcı Etiketi:</strong><br>#<%- discordRequest.user.discriminator %></li>
          <li class="list-group-item"><strong>Kullanıcı ID'si:</strong><br><%- discordRequest.user.id %></li>
          <li class="list-group-item"><strong>Kullanıcı Mail Adresi:</strong><br><%- discordRequest.user.email %></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="col">
    <div class="card border border-info">
      <div class="card-body">
        <ul class="list-group list-group-flush">
          <li class="list-group-item"><strong>Kategori:</strong><br><% let thUserBusinessStatus = db.get(`businessstatus_${discordRequest.user.id}`); %><% if (!thUserBusinessStatus) { %>Kullanıcı<% } else { %><%- thUserBusinessStatus %><% } %></li>
          <li class="list-group-item"><strong>Özel Durum:</strong><br><% let thUserCustomStatus = db.get(`customstatus_${discordRequest.user.id}`); %><% if (!thUserCustomStatus) { %>Özel Durum Belirtilmemiş.<% } else { %><%- thUserCustomStatus %><% } %></li>
          <li class="list-group-item"><strong>Biyografi:</strong><br><% let userBio = db.get(`bio_${discordRequest.user.id}`);  %><% if (!userBio) { %>Biyografi Yok.<% } else { %><%- userBio %><% } %></li>
        </ul>
      </div>
    </div>
  </div>
  </div>
    <br>
    <br>
    </div>
    <%- include('footer') %>
    <script>
var businessStatuses = ["Antrenör", "Aşçı", "Bakan/Bürokrat", "Bilgisayar Oyuncusu", "Bilim İnsanı", "Blog Yazarı", "Dansçı", "Dijital İçerik Üretici", "DJ", "Editör", "Film Karakteri", "Film Yönetmeni", "Fitness Eğitmeni", "Fitness Modeli", "Fotoğrafçı", "Gazeteci", "Girişimci", "Grafik Tasarımcı", "Haber Programı Sunucusu", "İç Tasarım Stüdyosu", "Komedyen", "Konser Turu", "Manken", "Mimari Tasarımcı", "Modacı", "Motivasyon Konuşmacısı", "Müzisyen", "Müzisyen/Grup", "Oyun Videosu İçerik Üretici", "Oyuncu", "Prodüktör", "Sanatçı", "Siyasetçi", "Siyasi Aday", "Sporcu", "Tanınmış Kişi", "Tasarımcı", "Web Tasarımcısı","Video İçeriği Üretici", "Yazar", "Yazılımcı","Yazılım Uzmanı"];
  
function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
      x[i].parentNode.removeChild(x[i]);
    }
  }
}
/*execute a function when someone clicks in the document:*/
document.addEventListener("click", function (e) {
    closeAllLists(e.target);
});
}

autocomplete(document.getElementById("businessStatus"), businessStatuses);
      </script>
      <style>
      .autocomplete {
        /*the container must be positioned relative:*/
        position: relative;
        display: inline-block;
      }
      .autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}
.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff;
  border-bottom: 1px solid #d4d4d4;
}
.autocomplete-items div:hover {
  /*when hovering an item:*/
  background-color: #e9e9e9;
}
.autocomplete-active {
  /*when navigating through the items using the arrow keys:*/
  background-color: DodgerBlue !important;
  color: #ffffff;
}
      </style>
</body>
</html>